{"version":3,"file":"static/js/364.16c0aef0.chunk.js","mappings":"waAyMA,EAtL0B,WACtB,IAAAA,GAAwBC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7BI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GACpBI,GAA8BL,EAAAA,EAAAA,WAAS,GAAKM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAArCE,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GAC1BG,GAA0BT,EAAAA,EAAAA,UAAS,MAAKU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAAjCE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GACtBG,GAAoBb,EAAAA,EAAAA,UAAS,GAAEc,GAAAZ,EAAAA,EAAAA,GAAAW,EAAA,GAAxBE,EAAED,EAAA,GAAEE,EAAKF,EAAA,GAChBG,GAA4CjB,EAAAA,EAAAA,UAAS,MAAKkB,GAAAhB,EAAAA,EAAAA,GAAAe,EAAA,GAAnDE,EAAcD,EAAA,GAAEE,EAAiBF,EAAA,GACxCG,GAA4BrB,EAAAA,EAAAA,UAAS,CAAC,UAAW,WAAY,aAAYsB,GAAApB,EAAAA,EAAAA,GAAAmB,EAAA,GAAlEE,EAAMD,EAAA,GAAEE,EAASF,EAAA,GACxBG,GAAwCzB,EAAAA,EAAAA,UAAS,MAAK0B,GAAAxB,EAAAA,EAAAA,GAAAuB,EAAA,GAA/CE,EAAYD,EAAA,GAAEE,EAAeF,EAAA,GACpCG,GAAgC7B,EAAAA,EAAAA,WAAS,GAAK8B,GAAA5B,EAAAA,EAAAA,GAAA2B,EAAA,GAAvCE,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GAEtBG,EAAgB,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAAzB,EAAA0B,EAAA,OAAAL,EAAAA,EAAAA,KAAAM,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAWmK,OATlLN,EAAUO,OAAOC,SAASC,KAG1BR,EAAYD,EAAQU,MAAM,KAC1BlC,EAAKyB,EAAUA,EAAUU,OAAS,GACxClC,EAAMD,GACNoC,QAAQC,IAAI,WAAY7B,EAAO2B,QAAOP,EAAAC,KAAA,EAGhB,mKAAkKD,EAAAE,KAAA,GACzJQ,EAAAA,EAAAA,IAAU,eADnB,mKAC8CtC,GAAI,KAAD,GAA7D0B,EAAYE,EAAAW,MAELC,UAAYC,EAAWf,EAAac,WACjDd,EAAagB,UAAYD,EAAWf,EAAagB,WACjDrD,EAAQqC,GAERrB,EAAkBqB,EAAalB,QAC/BK,EAAgBa,EAAaiB,MACF,WAAvBjB,EAAalB,QACbC,EAAU,CAACiB,EAAalB,SACxBS,GAAY,IAIZA,GAAY,GAAMW,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAgB,GAAAhB,EAAA,SAEtB/B,EAAQ+B,EAAAgB,IAAQ,QAEE,OAFFhB,EAAAC,KAAA,GAEhBpC,GAAW,GAAOmC,EAAAiB,OAAA,6BAAAjB,EAAAkB,OAAA,GAAAvB,EAAA,yBAEzB,kBAhCqB,OAAAJ,EAAA4B,MAAA,KAAAC,UAAA,MAiCtBC,EAAAA,EAAAA,YAAU,WAGN/B,GACJ,GAAG,IAYH,SAASuB,EAAWS,GAChB,OAAOC,EAAAA,EAAAA,GAAgBD,EAC3B,CACA,GAAI1D,EAAS,OAAO4D,EAAAA,EAAAA,KAAA,OAAAC,SAAK,eACzB,GAAIzD,EAAO,OAAO0D,EAAAA,EAAAA,MAAA,OAAAD,SAAA,CAAK,UAAQzD,EAAM2D,WAwBrC,OACIH,EAAAA,EAAAA,KAACI,EAAAA,SAAQ,CAAAH,UACLD,EAAAA,EAAAA,KAACK,EAAAA,gBAAe,CAAAJ,UACZD,EAAAA,EAAAA,KAACM,EAAAA,cAAa,CAACC,UAAU,MAAMC,WAAW,gBAAgBC,QAAQ,EAC9DC,QAAS,EAAGC,OAAO,EAAOC,MAAM,EAAMX,UACtCD,EAAAA,EAAAA,KAACa,EAAAA,EAAS,CAACC,OAAK,EAAAb,UACZD,EAAAA,EAAAA,KAACe,EAAAA,EAAI,CAACC,UAAU,iBAAgBf,UAC5BC,EAAAA,EAAAA,MAACe,EAAAA,EAAQ,CAAAhB,SAAA,EACLC,EAAAA,EAAAA,MAACgB,EAAAA,EAAS,CAAAjB,SAAA,CAAC,kBAAgBrD,MAC3BsD,EAAAA,EAAAA,MAACiB,EAAAA,EAAI,CAACC,SAhClC,SAAsBC,GAClBA,EAAEC,iBACF,IAAMC,EAAuB,eAAAC,GAAAxD,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAuD,IAAA,IAAAnD,EAAA,OAAAL,EAAAA,EAAAA,KAAAM,MAAA,SAAAmD,GAAA,cAAAA,EAAAjD,KAAAiD,EAAAhD,MAAA,cAAAgD,EAAAjD,KAAA,EAAAiD,EAAAhD,KAAA,GAIGiD,EAAAA,EAAAA,IAAa,eAAgB3E,EAAgBJ,GAAI,KAAD,EAArE0B,EAAYoD,EAAAvC,KAClBlD,EAAQqC,GACRrB,EAAkBqB,EAAalB,QAC/BK,EAAgBa,EAAaiB,MAC7B1B,GAAY,GAEZmB,QAAQC,IAAI,WAAajC,GAAe0E,EAAAhD,KAAA,iBAAAgD,EAAAjD,KAAA,GAAAiD,EAAAlC,GAAAkC,EAAA,SAExCjF,EAAQiF,EAAAlC,IAAQ,QAGG,OAHHkC,EAAAjD,KAAA,GAEhBpC,GAAW,GACXyB,IAAmB4D,EAAAjC,OAAA,6BAAAiC,EAAAhC,OAAA,GAAA+B,EAAA,yBAE1B,kBAjB4B,OAAAD,EAAA7B,MAAA,KAAAC,UAAA,KAmB7B2B,GACJ,EAUyDtB,SAAA,EACzBC,EAAAA,EAAAA,MAAC0B,EAAAA,EAAS,CAACC,KAAG,EAAA5B,SAAA,EACVD,EAAAA,EAAAA,KAAC8B,EAAAA,EAAK,CAACC,IAAI,eAAeC,GAAI,EAAE/B,SAAC,oBAIjCD,EAAAA,EAAAA,KAACiC,EAAAA,EAAG,CAACD,GAAI,GAAG/B,UACRD,EAAAA,EAAAA,KAACkC,EAAAA,EAAK,CAACtE,UAAQ,EAAC2B,KAAK,OAAO4C,KAAK,eAAevF,GAAG,eAAewF,YAAY,qBAAqBC,MAAOrG,EAAKsG,qBAGvHpC,EAAAA,EAAAA,MAAC0B,EAAAA,EAAS,CAACC,KAAG,EAAA5B,SAAA,EACVD,EAAAA,EAAAA,KAAC8B,EAAAA,EAAK,CAACC,IAAI,kBAAkBC,GAAI,EAAE/B,SAAC,gBAGpCD,EAAAA,EAAAA,KAACiC,EAAAA,EAAG,CAACD,GAAI,GAAG/B,UACRD,EAAAA,EAAAA,KAACkC,EAAAA,EAAK,CAACtE,UAAQ,EAAC2B,KAAK,OAAO4C,KAAK,YAAYvF,GAAG,YAAYwF,YAAY,uBAAuBC,MAAOrG,EAAKoD,kBAGnHc,EAAAA,EAAAA,MAAC0B,EAAAA,EAAS,CAACC,KAAG,EAAA5B,SAAA,EACVD,EAAAA,EAAAA,KAAC8B,EAAAA,EAAK,CAACC,IAAI,kBAAkBC,GAAI,EAAE/B,SAAC,gBAGpCD,EAAAA,EAAAA,KAACiC,EAAAA,EAAG,CAACD,GAAI,GAAG/B,UACRD,EAAAA,EAAAA,KAACkC,EAAAA,EAAK,CAACtE,UAAQ,EAAC2B,KAAK,OAAO4C,KAAK,YAAYvF,GAAG,YAAYwF,YAAY,uBAAuBC,MAAOrG,EAAKsD,kBAGnHY,EAAAA,EAAAA,MAAC0B,EAAAA,EAAS,CAACC,KAAG,EAAA5B,SAAA,EACVD,EAAAA,EAAAA,KAAC8B,EAAAA,EAAK,CAACC,IAAI,SAASC,GAAI,EAAE/B,SAAC,YAG3BD,EAAAA,EAAAA,KAACiC,EAAAA,EAAG,CAACD,GAAI,GAAG/B,UACRD,EAAAA,EAAAA,KAACkC,EAAAA,EAAK,CACF3C,KAAK,SACL4C,KAAK,SACLvF,GAAIZ,EAAKoB,OACTiF,MAAOrF,EACPuF,SAnFjB,SAACC,GACL,WAAfxG,EAAKoB,QACLH,EAAkBuF,EAAMC,OAAOJ,MAEvC,EA+EyEpC,SAE5B7C,EAAOsF,KAAI,SAACC,EAAaC,GAAK,OAC3B5C,EAAAA,EAAAA,KAAA,UAAoBqC,MAAOM,EAAY1C,SAClC0C,GADQC,EAEJ,YAKzB1C,EAAAA,EAAAA,MAAC0B,EAAAA,EAAS,CAACC,KAAG,EAAA5B,SAAA,EACVD,EAAAA,EAAAA,KAAC8B,EAAAA,EAAK,CAACC,IAAI,cAAcC,GAAI,EAAE/B,SAAC,UAGhCD,EAAAA,EAAAA,KAACiC,EAAAA,EAAG,CAACD,GAAI,GAAG/B,UACRD,EAAAA,EAAAA,KAACkC,EAAAA,EAAK,CAACtE,UAAQ,EAAC2B,KAAK,OAAO4C,KAAK,SAASvF,GAAIZ,EAAKuD,KAAM8C,MAAO7E,EAAc+E,SA5F7F,SAACC,GACtBvF,EAAkBuF,EAAMC,OAAOJ,MACnC,EA0FiJpC,UAErGD,EAAAA,EAAAA,KAAA,UAA2BqC,MAAO7E,EAAayC,SAC1CzC,GADQA,WAMzB0C,EAAAA,EAAAA,MAAC0B,EAAAA,EAAS,CAACC,KAAG,EAAA5B,SAAA,EACVD,EAAAA,EAAAA,KAAC8B,EAAAA,EAAK,CAACC,IAAI,cAAcC,GAAI,EAAE/B,SAAC,iBAGhCD,EAAAA,EAAAA,KAACiC,EAAAA,EAAG,CAACD,GAAI,GAAG/B,UACRD,EAAAA,EAAAA,KAACkC,EAAAA,EAAK,CAACtE,UAAQ,EAAC2B,KAAK,WAAW4C,KAAK,cAAcvF,GAAG,cAAcyF,MAAOrG,EAAK6G,mBAGtFjF,GAOEoC,EAAAA,EAAAA,KAAA,WANAA,EAAAA,EAAAA,KAAC4B,EAAAA,EAAS,CAACkB,OAAK,EAACjB,KAAG,EAAA5B,UAChBD,EAAAA,EAAAA,KAACiC,EAAAA,EAAG,CAACD,GAAI,CAAEe,KAAM,GAAIC,OAAQ,GAAI/C,UAC7BD,EAAAA,EAAAA,KAACiD,EAAAA,EAAM,CAAAhD,SAAC,8BAcxD,EC1KA,EAjB0B,SAAHlC,GAAWA,EAALmF,MAAK,OAC9BhD,EAAAA,EAAAA,MAACE,EAAAA,SAAQ,CAAAH,SAAA,EACLD,EAAAA,EAAAA,KAACmD,EAAAA,EAAS,KACVjD,EAAAA,EAAAA,MAAA,OAAKc,UAAU,WAAUf,SAAA,EACrBD,EAAAA,EAAAA,KAACoD,EAAAA,EAAU,KACXlD,EAAAA,EAAAA,MAAA,OAAKc,UAAU,kBAAiBf,SAAA,EAE5BD,EAAAA,EAAAA,KAACqD,EAAkB,KAEnBrD,EAAAA,EAAAA,KAAA,OAAKgB,UAAU,qBAAoBf,UAC/BD,EAAAA,EAAAA,KAACsD,EAAAA,EAAS,cAIf,C,mICzBTC,EAAW,gCAAgC,SAElCC,EAASC,EAAAC,GAAA,OAAAC,EAAAhE,MAAC,KAADC,UAAA,UAAA+D,IA8CvB,OA9CuBA,GAAA3F,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAxB,SAAAC,EAAyByF,EAAUC,GAAS,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAxE,UAAA,OAAA3B,EAAAA,EAAAA,KAAAM,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAqBsC,OArBpCoF,EAAMM,EAAArF,OAAA,QAAAsF,IAAAD,EAAA,GAAAA,EAAA,GAAG,CAAC,EAC9CL,EAAM,IAAIO,IAAI,GAADC,OAAIhB,EAAQ,KAAAgB,OAAIX,IAE7BI,EAAcQ,aAAaC,QAAQ,QACrCR,EAAO,KACXJ,EAAY,GAGQ,OAAhBG,GAGAC,EAAOS,KAAKC,MAAMX,GAClBhF,QAAQC,IAAIgF,GACZJ,EAAYI,EAAKW,OAAOC,OAAOC,OAG/B9F,QAAQC,IAAI,oCAGhBD,QAAQC,IAAI4E,GAEZkB,OAAOC,KAAKlB,GAAQmB,SAAQ,SAAAC,GAAG,OAAInB,EAAIoB,aAAaC,OAAOF,EAAKpB,EAAOoB,GAAK,IAAE1G,EAAAE,KAAA,GAEvD2G,MAAMtB,EAAK,CAC9BuB,OAAQ,MACRC,QAAS,CACL,cAAgB,UAADhB,OAAYV,GAC3B,eAAgB,sBAErB,KAAD,GAIF,GAVMK,EAAQ1F,EAAAW,KAQdH,QAAQC,IAAIiF,GAGPA,EAASsB,GAAG,CAADhH,EAAAE,KAAA,eAEN,IAAI+G,MAAM,+BAA+B,KAAD,UAAAjH,EAAAC,KAAA,GAAAD,EAAAE,KAAA,GAGvBwF,EAASwB,OAAO,KAAD,GACjB,OADfvB,EAAQ3F,EAAAW,KACdH,QAAQC,IAAIkF,GAAS3F,EAAAmH,OAAA,SACdxB,GAAQ,cAAA3F,EAAAC,KAAA,GAAAD,EAAAgB,GAAAhB,EAAA,UAET,IAAIiH,MAAM,iCAAiC,KAAD,oBAAAjH,EAAAkB,OAAA,GAAAvB,EAAA,oBAGvDwF,EAAAhE,MAAA,KAAAC,UAAA,UAEcV,EAAS0G,EAAAC,EAAAC,GAAA,OAAAC,EAAApG,MAAC,KAADC,UAAA,UAAAmG,IAyCvB,OAzCuBA,GAAA/H,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAxB,SAAAuD,EAAyBmC,EAAUC,EAAWjH,GAAE,IAAAmH,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAlG,EAAAA,EAAAA,KAAAM,MAAA,SAAAmD,GAAA,cAAAA,EAAAjD,KAAAiD,EAAAhD,MAAA,OAqB5C,OApBMqF,EAAM,IAAIO,IAAI,GAADC,OAAIhB,EAAQ,KAAAgB,OAAIX,EAAQ,KAAAW,OAAI3H,IAEzCoH,EAAcQ,aAAaC,QAAQ,QACrCR,EAAO,KACXJ,EAAY,GAGQ,OAAhBG,GAGAhF,QAAQC,IAAI+E,GACZC,EAAOS,KAAKC,MAAMX,GAClBhF,QAAQC,IAAIgF,EAAKW,OAAOC,OAAOC,OAC/BjB,EAAYI,EAAKW,OAAOC,OAAOC,OAG/B9F,QAAQC,IAAI,oCAGhBD,QAAQC,IAAI4E,GACZnC,EAAAhD,KAAA,EAEuB2G,MAAMtB,EAAK,CAC9BuB,OAAQ,MACRC,QAAS,CACL,cAAgB,UAADhB,OAAYV,GAC3B,eAAgB,sBAErB,KAAD,EANY,IAARK,EAAQxC,EAAAvC,MAQAqG,GAAG,CAAD9D,EAAAhD,KAAA,eACN,IAAI+G,MAAM,+BAA+B,KAAD,UAAA/D,EAAAjD,KAAA,GAAAiD,EAAAhD,KAAA,GAGvBwF,EAASwB,OAAO,KAAD,GACjB,OADfvB,EAAQzC,EAAAvC,KACdH,QAAQC,IAAIkF,GAASzC,EAAAiE,OAAA,SACdxB,GAAQ,cAAAzC,EAAAjD,KAAA,GAAAiD,EAAAlC,GAAAkC,EAAA,UAET,IAAI+D,MAAM,iCAAiC,KAAD,oBAAA/D,EAAAhC,OAAA,GAAA+B,EAAA,qBAEvD9B,MAAA,KAAAC,UAAA,UAEc+B,EAAYqE,EAAAC,EAAAC,GAAA,OAAAC,EAAAxG,MAAC,KAADC,UAAA,UAAAuG,IAwC1B,OAxC0BA,GAAAnI,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAA3B,SAAAkI,EAA4BxC,EAAUxG,EAAQR,GAAE,IAAAmH,EAAAC,EAAAC,EAAAJ,EAAAK,EAAAC,EAAA,OAAAlG,EAAAA,EAAAA,KAAAM,MAAA,SAAA8H,GAAA,cAAAA,EAAA5H,KAAA4H,EAAA3H,MAAA,OAmB5C,OAlBMqF,EAAM,IAAIO,IAAI,GAADC,OAAIhB,EAAQ,KAAAgB,OAAIX,EAAQ,KAAAW,OAAI3H,EAAE,YAE3CoH,EAAcQ,aAAaC,QAAQ,QACrCR,EAAO,KACPJ,EAAY,GAGI,OAAhBG,GAGAC,EAAOS,KAAKC,MAAMX,GAClBH,EAAYI,EAAKW,OAAOC,OAAOC,OAG/B9F,QAAQC,IAAI,oCAGhBD,QAAQC,IAAI4E,GACZwC,EAAA3H,KAAA,EAEuB2G,MAAMtB,EAAK,CAC9BuB,OAAQ,MACRC,QAAS,CACL,cAAgB,UAADhB,OAAYV,GAC3B,eAAgB,oBAEpByC,KAAM5B,KAAK6B,UAAU,CAAE,OAAUnJ,MAClC,KAAD,EAPY,IAAR8G,EAAQmC,EAAAlH,MASAqG,GAAG,CAADa,EAAA3H,KAAA,eACN,IAAI+G,MAAM,+BAA+B,KAAD,UAAAY,EAAA5H,KAAA,GAAA4H,EAAA3H,KAAA,GAGvBwF,EAASwB,OAAO,KAAD,GACjB,OADfvB,EAAQkC,EAAAlH,KACdH,QAAQC,IAAIkF,GAASkC,EAAAV,OAAA,SACdxB,GAAQ,cAAAkC,EAAA5H,KAAA,GAAA4H,EAAA7G,GAAA6G,EAAA,UAET,IAAIZ,MAAM,iCAAiC,KAAD,oBAAAY,EAAA3G,OAAA,GAAA0G,EAAA,qBAEvDzG,MAAA,KAAAC,UAAA,C,wBCtID,SAASG,EAAgBD,GACrB,IAAM0G,EAAO,IAAIC,KAAK3G,GACtB,GAAI4G,MAAMF,EAAKG,WACX,MAAO,eAEX,IAAMC,EAAQC,OAAOL,EAAKM,YAAYC,SAAS,EAAG,KAC5CC,EAAUH,OAAOL,EAAKS,cAAcF,SAAS,EAAG,KAChDG,EAAML,OAAOL,EAAKW,WAAWJ,SAAS,EAAG,KACzCK,EAAQP,OAAOL,EAAKa,WAAa,GAAGN,SAAS,EAAG,KAChDO,EAAOd,EAAKe,cAClB,MAAM,GAANhD,OAAUqC,EAAK,KAAArC,OAAIyC,EAAO,KAAAzC,OAAI2C,EAAG,KAAA3C,OAAI6C,EAAK,KAAA7C,OAAI+C,EAClD,C","sources":["Applications/Details/index.js","DemoPages/Applications/Detail/index.js","Services/application.js","utils.js"],"sourcesContent":["import React, { Fragment, useState, useEffect } from \"react\";\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport {\n    Col,\n    Card,\n    CardBody,\n    CardTitle,\n    Button,\n    Form,\n    FormGroup,\n    Label,\n    Input,\n    Container,\n} from \"reactstrap\";\n\n// Applications.js\nimport { getDetail, changeStatus } from '../../Services/application';\nimport { formatDateUtils } from '../../utils'\n\nconst ApplicationDetail = () => {\n    const [data, setData] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [id, setId] = useState(0);\n    const [selectedStatus, setSelectedStatus] = useState(null);\n    const [status, setStatus] = useState([\"PENDING\", \"APPROVED\", \"REJECTED\"]);\n    const [selectedType, setSelectedType] = useState(null);\n    const [disabled, setDisabled] = useState(true);\n\n    const fetchDataFromAPI = async () => {\n        // Get the full URL\n        const fullUrl = window.location.href;\n\n        // Get the value of the last fragment (or \"flash\") from the URL\n        const fragments = fullUrl.split('/');\n        const id = fragments[fragments.length - 1];\n        setId(id)\n        console.log('status: ', status.length)\n        try {\n            // Example of passing authentication token and parameters\n            const authToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjgsImlhdCI6MTcxMTY4NjkwMCwiZXhwIjoxNzExNjg4NzAwLCJ0eXBlIjoiQUNDRVNTIn0.zlxkFbOBz4MSroNrkhMVFJ1dOh3W9tVTA-5asNDwk70';\n            const responseData = await getDetail('applications', authToken, id);\n\n            responseData.createdAt = formatDate(responseData.createdAt)\n            responseData.updatedAt = formatDate(responseData.updatedAt)\n            setData(responseData);\n            // setData(JSON.parse(data))\n            setSelectedStatus(responseData.status)\n            setSelectedType(responseData.type)\n            if (responseData.status != 'PENDING') {\n                setStatus([responseData.status])\n                setDisabled(true)\n            }\n\n            else\n                setDisabled(false)\n        } catch (error) {\n            setError(error);\n        } finally {\n            setLoading(false);\n        }\n    };\n    useEffect(() => {\n\n\n        fetchDataFromAPI();\n    }, []);\n\n    const handleStatusChange = (event) => {\n        if (data.status == 'PENDING')\n            setSelectedStatus(event.target.value)\n        else return\n    };\n\n    const handleTypeChange = (event) => {\n        setSelectedStatus(event.target.value)\n    };\n\n    function formatDate(dateString) {\n        return formatDateUtils(dateString)\n    }\n    if (loading) return <div>Loading...</div>;\n    if (error) return <div>Error: {error.message}</div>;\n    function handleSubmit(e) {\n        e.preventDefault();\n        const changeApplicationStatus = async () => {\n\n            try {\n                // Example of passing authentication token and parameters\n                const responseData = await changeStatus('applications', selectedStatus, id);\n                setData(responseData);\n                setSelectedStatus(responseData.status)\n                setSelectedType(responseData.type)\n                setDisabled(false)\n\n                console.log('status: ' + selectedStatus)\n            } catch (error) {\n                setError(error);\n            } finally {\n                setLoading(false);\n                fetchDataFromAPI();\n            }\n        };\n\n        changeApplicationStatus();\n    }\n    return (\n        <Fragment>\n            <TransitionGroup>\n                <CSSTransition component=\"div\" classNames=\"TabsAnimation\" appear={true}\n                    timeout={0} enter={false} exit={false}>\n                    <Container fluid>\n                        <Card className=\"main-card mb-3\">\n                            <CardBody>\n                                <CardTitle>Admin detail # {id}</CardTitle>\n                                <Form onSubmit={handleSubmit}>\n                                    <FormGroup row>\n                                        <Label for=\"exampleEmail\" sm={2}>\n                                            Approved By Id\n                                        </Label>\n\n                                        <Col sm={10}>\n                                            <Input disabled type=\"text\" name=\"approvedById\" id=\"exampleEmail\" placeholder=\"with a placeholder\" value={data.approvedById} />\n                                        </Col>\n                                    </FormGroup>\n                                    <FormGroup row>\n                                        <Label for=\"examplePassword\" sm={2}>\n                                            Created At\n                                        </Label>\n                                        <Col sm={10}>\n                                            <Input disabled type=\"text\" name=\"createdAt\" id=\"createdat\" placeholder=\"password placeholder\" value={data.createdAt} />\n                                        </Col>\n                                    </FormGroup>\n                                    <FormGroup row>\n                                        <Label for=\"examplePassword\" sm={2}>\n                                            Updated At\n                                        </Label>\n                                        <Col sm={10}>\n                                            <Input disabled type=\"text\" name=\"updatedAt\" id=\"updatedat\" placeholder=\"password placeholder\" value={data.updatedAt} />\n                                        </Col>\n                                    </FormGroup>\n                                    <FormGroup row>\n                                        <Label for=\"status\" sm={2}>\n                                            Status\n                                        </Label>\n                                        <Col sm={10}>\n                                            <Input\n                                                type=\"select\"\n                                                name=\"select\"\n                                                id={data.status}\n                                                value={selectedStatus}\n                                                onChange={handleStatusChange}\n                                            >\n                                                {status.map((statusValue, index) => (\n                                                    <option key={index} value={statusValue}>\n                                                        {statusValue}\n                                                    </option>\n                                                ))}\n                                            </Input>\n                                        </Col>\n                                    </FormGroup>\n                                    <FormGroup row>\n                                        <Label for=\"exampleText\" sm={2}>\n                                            Type\n                                        </Label>\n                                        <Col sm={10}>\n                                            <Input disabled type=\"text\" name=\"select\" id={data.type} value={selectedType} onChange={handleTypeChange} >\n\n                                                <option key={selectedType} value={selectedType}>\n                                                    {selectedType}\n                                                </option>\n                                            </Input>\n                                        </Col>\n                                    </FormGroup>\n                                    <FormGroup row>\n                                        <Label for=\"exampleText\" sm={2}>\n                                            Description\n                                        </Label>\n                                        <Col sm={10}>\n                                            <Input disabled type=\"textarea\" name=\"description\" id=\"exampleText\" value={data.description} />\n                                        </Col>\n                                    </FormGroup>\n                                    {!disabled ? (\n                                        <FormGroup check row>\n                                            <Col sm={{ size: 10, offset: 2 }}>\n                                                <Button>Update</Button>\n                                            </Col>\n                                        </FormGroup>\n                                    ) : (\n                                        <div></div>\n                                    )}\n                                </Form>\n                            </CardBody>\n                        </Card>\n                    </Container>\n                </CSSTransition>\n            </TransitionGroup>\n        </Fragment>\n    );\n};\n\nexport default ApplicationDetail;\n","import React, { Fragment } from \"react\";\n\n\n// Layout\n\nimport AppHeader from \"../../../Layout/AppHeader/\";\nimport AppSidebar from \"../../../Layout/AppSidebar/\";\nimport AppFooter from \"../../../Layout/AppFooter/\";\nimport ApplicationDetails from \"../../../Applications/Details/\";\n\n// Theme Options\n\nconst ApplicationDetail = ({ match }) => (\n    <Fragment>\n        <AppHeader />\n        <div className=\"app-main\">\n            <AppSidebar />\n            <div className=\"app-main__outer\">\n                {/* <div className=\"app-main__inner p-0\"> */}\n                <ApplicationDetails></ApplicationDetails>\n                {/* </div> */}\n                <div className=\"app-wrapper-footer\">\n                    <AppFooter />\n                </div>\n            </div>\n        </div>\n    </Fragment>\n);\n\nexport default ApplicationDetail;\n","// apiService.js\nconst BASE_URL = 'http://14.225.211.111:3000/v1';\n\nasync function fetchData(endpoint, authToken, params = {}) {\n    const url = new URL(`${BASE_URL}/${endpoint}`);\n    // Retrieve the value from local storage using the key\n    const storedValue = localStorage.getItem('user');\n    let user = null\n    authToken = '';\n\n    // Check if the value is present\n    if (storedValue !== null) {\n        // Value found in local storage, do something with it\n        // Parse the JSON string back to an object\n        user = JSON.parse(storedValue)\n        console.log(user)\n        authToken = user.tokens.access.token;\n    } else {\n        // Value not found in local storage\n        console.log('Value not found in local storage');\n    }\n\n    console.log(authToken)\n    // Add query parameters\n    Object.keys(params).forEach(key => url.searchParams.append(key, params[key]));\n\n    const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n            'Authorization': `Bearer ${authToken}`, // Include the authorization token in the header\n            'Content-Type': 'application/json', // Example of adding a Content-Type header\n        },\n    });\n\n    console.log(response)\n    //TODO: REDIRECT TO LOGIN PAGE\n    // window.dispatchEvent(new Event('login'))\n    if (!response.ok) {\n\n        throw new Error('Network response was not ok');\n    }\n    try {\n        const jsonData = await response.json(); // Read the response body once\n        console.log(jsonData)\n        return jsonData;\n    } catch (error) {\n        throw new Error('Failed to parse response JSON');\n\n    }\n}\n\nasync function getDetail(endpoint, authToken, id) {\n    const url = new URL(`${BASE_URL}/${endpoint}/${id}`);\n    // Retrieve the value from local storage using the key\n    const storedValue = localStorage.getItem('user');\n    let user = null\n    authToken = '';\n\n    // Check if the value is present\n    if (storedValue !== null) {\n        // Value found in local storage, do something with it\n        // Parse the JSON string back to an object\n        console.log(storedValue)\n        user = JSON.parse(storedValue)\n        console.log(user.tokens.access.token)\n        authToken = user.tokens.access.token;\n    } else {\n        // Value not found in local storage\n        console.log('Value not found in local storage');\n    }\n\n    console.log(authToken)\n    // Add query parameters\n\n    const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n            'Authorization': `Bearer ${authToken}`, // Include the authorization token in the header\n            'Content-Type': 'application/json', // Example of adding a Content-Type header\n        },\n    });\n\n    if (!response.ok) {\n        throw new Error('Network response was not ok');\n    }\n    try {\n        const jsonData = await response.json(); // Read the response body once\n        console.log(jsonData)\n        return jsonData;\n    } catch (error) {\n        throw new Error('Failed to parse response JSON');\n    }\n}\n\nasync function changeStatus(endpoint, status, id) {\n    const url = new URL(`${BASE_URL}/${endpoint}/${id}/status`);\n    // Retrieve the value from local storage using the key\n    const storedValue = localStorage.getItem('user');\n    let user = null\n    let authToken = '';\n\n    // Check if the value is present\n    if (storedValue !== null) {\n        // Value found in local storage, do something with it\n        // Parse the JSON string back to an object\n        user = JSON.parse(storedValue)\n        authToken = user.tokens.access.token;\n    } else {\n        // Value not found in local storage\n        console.log('Value not found in local storage');\n    }\n\n    console.log(authToken)\n    // Add query parameters\n\n    const response = await fetch(url, {\n        method: 'PUT',\n        headers: {\n            'Authorization': `Bearer ${authToken}`, // Include the authorization token in the header\n            'Content-Type': 'application/json', // Example of adding a Content-Type header\n        },\n        body: JSON.stringify({ \"status\": status }),\n    });\n\n    if (!response.ok) {\n        throw new Error('Network response was not ok');\n    }\n    try {\n        const jsonData = await response.json(); // Read the response body once\n        console.log(jsonData)\n        return jsonData;\n    } catch (error) {\n        throw new Error('Failed to parse response JSON');\n    }\n}\n\nexport { fetchData, getDetail, changeStatus };\n","function formatDateUtils(dateString) {\n    const date = new Date(dateString);\n    if (isNaN(date.getTime())) {\n        return 'Invalid Date'; // Return a default value if the provided string is not a valid date\n    }\n    const hours = String(date.getHours()).padStart(2, '0');\n    const minutes = String(date.getMinutes()).padStart(2, '0');\n    const day = String(date.getDate()).padStart(2, '0');\n    const month = String(date.getMonth() + 1).padStart(2, '0'); // Adding 1 because months are zero-based\n    const year = date.getFullYear();\n    return `${hours}:${minutes} ${day}-${month}-${year}`;\n}\n\nexport { formatDateUtils }"],"names":["_useState","useState","_useState2","_slicedToArray","data","setData","_useState3","_useState4","loading","setLoading","_useState5","_useState6","error","setError","_useState7","_useState8","id","setId","_useState9","_useState10","selectedStatus","setSelectedStatus","_useState11","_useState12","status","setStatus","_useState13","_useState14","selectedType","setSelectedType","_useState15","_useState16","disabled","setDisabled","fetchDataFromAPI","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","fullUrl","fragments","responseData","wrap","_context","prev","next","window","location","href","split","length","console","log","getDetail","sent","createdAt","formatDate","updatedAt","type","t0","finish","stop","apply","arguments","useEffect","dateString","formatDateUtils","_jsx","children","_jsxs","message","Fragment","TransitionGroup","CSSTransition","component","classNames","appear","timeout","enter","exit","Container","fluid","Card","className","CardBody","CardTitle","Form","onSubmit","e","preventDefault","changeApplicationStatus","_ref2","_callee2","_context2","changeStatus","FormGroup","row","Label","for","sm","Col","Input","name","placeholder","value","approvedById","onChange","event","target","map","statusValue","index","description","check","size","offset","Button","match","AppHeader","AppSidebar","ApplicationDetails","AppFooter","BASE_URL","fetchData","_x","_x2","_fetchData","endpoint","authToken","params","url","storedValue","user","response","jsonData","_args","undefined","URL","concat","localStorage","getItem","JSON","parse","tokens","access","token","Object","keys","forEach","key","searchParams","append","fetch","method","headers","ok","Error","json","abrupt","_x3","_x4","_x5","_getDetail","_x6","_x7","_x8","_changeStatus","_callee3","_context3","body","stringify","date","Date","isNaN","getTime","hours","String","getHours","padStart","minutes","getMinutes","day","getDate","month","getMonth","year","getFullYear"],"sourceRoot":""}