{"version":3,"file":"static/js/197.bb6936ed.chunk.js","mappings":"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","sources":["DemoPages/Users/user-detail.js","DemoPages/Users/user-detail-cover.js","Services/user.js","utils.js"],"sourcesContent":["import React, { Fragment, useState, useEffect } from \"react\";\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport {\n    Col,\n    Card,\n    CardBody,\n    CardTitle,\n    Button,\n    Form,\n    FormGroup,\n    Label,\n    Input,\n    Container,\n} from \"reactstrap\";\nimport {\n    useParams\n} from \"react-router-dom\";\n\n// Applications.js\nimport { getDetail } from '../../Services/user';\nimport { formatDateUtils } from '../../utils';\nimport defaultImageUrl from '../../assets/images/faces/default-avatar.jpeg';\n\nconst UserDetail = () => {\n\n    const [data, setData] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [selectedStatus, setSelectedStatus] = useState(null);\n    const [status, setStatus] = useState([\"PENDING\", \"APPROVED\", \"REJECTED\"]);\n    const [selectedType, setSelectedType] = useState(null);\n    const [disabled, setDisabled] = useState(true);\n    const id = useParams();\n    console.log('id: ' + JSON.stringify(id.id))\n\n    const fetchDataFromAPI = async () => {\n        console.log('status: ', status.length)\n        try {\n            // Example of passing authentication token and parameters\n            const authToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjgsImlhdCI6MTcxMTY4NjkwMCwiZXhwIjoxNzExNjg4NzAwLCJ0eXBlIjoiQUNDRVNTIn0.zlxkFbOBz4MSroNrkhMVFJ1dOh3W9tVTA-5asNDwk70';\n            const responseData = await getDetail('users', authToken, id.id);\n\n            responseData.createdAt = formatDate(responseData.createdAt)\n            responseData.updatedAt = formatDate(responseData.updatedAt)\n            setData(responseData);\n            // setData(JSON.parse(data))\n            setSelectedStatus(responseData.status)\n            setSelectedType(responseData.type)\n            if (responseData.status != 'PENDING') {\n                setStatus([responseData.status])\n                setDisabled(true)\n            }\n\n            else\n                setDisabled(false)\n        } catch (error) {\n            setError(error);\n        } finally {\n            setLoading(false);\n        }\n    };\n    useEffect(() => {\n        fetchDataFromAPI();\n    }, []);\n\n    // Date time format\n    function formatDate(dateString) {\n        return formatDateUtils(dateString)\n    }\n\n    function handleSubmit(e) {\n        e.preventDefault();\n        const changeApplicationStatus = async () => {\n\n            try {\n                // Example of passing authentication token and parameters\n                // const responseData = await changeStatus('applications', selectedStatus, id);\n                // setData(responseData);\n                // setSelectedStatus(responseData.status)\n                // setSelectedType(responseData.type)\n                setDisabled(false)\n\n                console.log('status: ' + selectedStatus)\n            } catch (error) {\n                setError(error);\n            } finally {\n                setLoading(false);\n                // fetchDataFromAPI();\n            }\n        };\n\n        changeApplicationStatus();\n    }\n\n    var imageExists = true;\n\n    const checkImage = () => {\n        const img = new Image();\n        img.src = data.avatar;\n        if (/\\.(jpeg|jpg|gif|png)$/.test(img.src)) {\n            imageExists = true;\n        } else {\n            imageExists = false;\n        }\n\n        img.onload = () => {\n            if (/\\.(jpeg|jpg|gif|png)$/.test(img.src)) {\n                imageExists = true;\n            } else {\n                console.log(2);\n                imageExists = false;\n            }\n        };\n        img.onerror = () => {\n            imageExists = false;\n        };\n    };\n\n    checkImage();\n\n    return (<Fragment>\n        <TransitionGroup>\n            <CSSTransition component=\"div\" classNames=\"TabsAnimation\" appear={true}\n                timeout={0} enter={false} exit={false}>\n                <Container fluid>\n                    <Card className=\"main-card mb-3\">\n                        <CardBody>\n                            <CardTitle>User detail # {data.id}</CardTitle>\n                            <Form onSubmit={handleSubmit}>\n                                <FormGroup row>\n                                    <Label for=\"examplePassword\" sm={2}>\n                                        Avatar\n                                    </Label>\n                                    <Col sm={10}>\n                                        {data.avatar && imageExists ? (\n                                            <img src={data.avatar} alt={\"User Avatar\"} style={{ width: 100, height: 100, borderRadius: '50%' }} />\n                                        ) : (\n                                            <img src={defaultImageUrl} alt={\"User Avatar\"} style={{ width: 100, height: 100, borderRadius: '50%' }} />\n                                        )}\n                                    </Col>\n                                </FormGroup>\n                                <FormGroup row>\n                                    <Label for=\"id\" sm={2}>\n                                        Id\n                                    </Label>\n                                    <Col sm={10}>\n                                        <Input disabled type=\"text\" name=\"approvedById\" id=\"id\" placeholder=\"with a placeholder\" value={data.id} />\n                                    </Col>\n                                </FormGroup>\n                                <FormGroup row>\n                                    <Label for=\"examplePassword\" sm={2}>\n                                        Email\n                                    </Label>\n                                    <Col sm={10}>\n                                        <Input disabled type=\"text\" name=\"createdAt\" id=\"createdat\" placeholder=\"password placeholder\" value={data.email} />\n                                    </Col>\n                                </FormGroup>\n                                <FormGroup row>\n                                    <Label for=\"examplePassword\" sm={2}>\n                                        Name\n                                    </Label>\n                                    <Col sm={10}>\n                                        <Input disabled type=\"text\" name=\"updatedAt\" id=\"updatedat\" placeholder=\"password placeholder\" value={data.name} />\n                                    </Col>\n                                </FormGroup>\n\n                                {/* ROLE */}\n                                <FormGroup row>\n                                    <Label for=\"examplePassword\" sm={2}>\n                                        ROLE\n                                    </Label>\n                                    <Col sm={10}>\n                                        <Input disabled type=\"text\" name=\"updatedAt\" id=\"updatedat\" placeholder=\"password placeholder\" value={data.role} />\n                                    </Col>\n                                </FormGroup>\n                                {/* GENDER */}\n                                <FormGroup row>\n                                    <Label for=\"examplePassword\" sm={2}>\n                                        GENDER\n                                    </Label>\n                                    <Col sm={10}>\n                                        <Input disabled type=\"text\" name=\"updatedAt\" id=\"updatedat\" placeholder=\"password placeholder\" value={data.gender} />\n                                    </Col>\n                                </FormGroup>\n                                {/* ACCOUNT TYPE */}\n                                <FormGroup row>\n                                    <Label for=\"examplePassword\" sm={2}>\n                                        ACCOUNT TYPE\n                                    </Label>\n                                    <Col sm={10}>\n                                        <Input disabled type=\"text\" name=\"updatedAt\" id=\"updatedat\" placeholder=\"password placeholder\" value={data.accountType} />\n                                    </Col>\n                                </FormGroup>\n                                {/* HEIGHT */}\n                                <FormGroup row>\n                                    <Label for=\"examplePassword\" sm={2}>\n                                        HEIGHT\n                                    </Label>\n                                    <Col sm={10}>\n                                        <Input disabled type=\"text\" name=\"updatedAt\" id=\"updatedat\" placeholder=\"password placeholder\" value={data.height} />\n                                    </Col>\n                                </FormGroup>\n                                {/* DATE OF BIRTH */}\n                                <FormGroup row>\n                                    <Label for=\"examplePassword\" sm={2}>\n                                        BIRTHDATE\n                                    </Label>\n                                    <Col sm={10}>\n                                        <Input disabled type=\"text\" name=\"updatedAt\" id=\"updatedat\" placeholder=\"password placeholder\" value={formatDate(data.dob)} />\n                                    </Col>\n                                </FormGroup>\n                                {/* START FREE TIME */}\n                                <FormGroup row>\n                                    <Label for=\"examplePassword\" sm={2}>\n                                        START FREE TIME\n                                    </Label>\n                                    <Col sm={10}>\n                                        <Input disabled type=\"text\" name=\"updatedAt\" id=\"updatedat\" placeholder=\"password placeholder\" value={formatDate(data.startFreeTime)} />\n                                    </Col>\n                                </FormGroup>\n                                {/* END FREE TIME */}\n                                <FormGroup row>\n                                    <Label for=\"examplePassword\" sm={2}>\n                                        END FREE TIME\n                                    </Label>\n                                    <Col sm={10}>\n                                        <Input disabled type=\"text\" name=\"updatedAt\" id=\"updatedat\" placeholder=\"password placeholder\" value={formatDate(data.endFreeTime)} />\n                                    </Col>\n                                </FormGroup>\n                                {/* CREATE AT */}\n                                <FormGroup row>\n                                    <Label for=\"examplePassword\" sm={2}>\n                                        CREATED AT\n                                    </Label>\n                                    <Col sm={10}>\n                                        <Input disabled type=\"text\" name=\"updatedAt\" id=\"updatedat\" placeholder=\"password placeholder\" value={data.createdAt} />\n                                    </Col>\n                                </FormGroup>\n                                {/* UPDATE AT */}\n                                <FormGroup row>\n                                    <Label for=\"examplePassword\" sm={2}>\n                                        UPDATED AT\n                                    </Label>\n                                    <Col sm={10}>\n                                        <Input disabled type=\"text\" name=\"updatedAt\" id=\"updatedat\" placeholder=\"password placeholder\" value={data.updatedAt} />\n                                    </Col>\n                                </FormGroup>\n                                {/* <FormGroup row>\n                                    <Label for=\"status\" sm={2}>\n                                        Status\n                                    </Label>\n                                    <Col sm={10}>\n                                        <Input\n                                            type=\"select\"\n                                            name=\"select\"\n                                            id={data.status}\n                                            value={selectedStatus}\n                                        // onChange={handleStatusChange}\n                                        >\n                                            {status.map((statusValue, index) => (\n                                                <option key={index} value={statusValue}>\n                                                    {statusValue}\n                                                </option>\n                                            ))}\n                                        </Input>\n                                    </Col>\n                                </FormGroup>\n                                <FormGroup row>\n                                    <Label for=\"exampleText\" sm={2}>\n                                        Type\n                                    </Label>\n                                    <Col sm={10}>\n                                        <Input disabled type=\"text\" name=\"select\" id={data.type} value={selectedType} >\n\n                                            <option key={selectedType} value={selectedType}>\n                                                {selectedType}\n                                            </option>\n                                        </Input>\n                                    </Col>\n                                </FormGroup>\n                                <FormGroup row>\n                                    <Label for=\"exampleText\" sm={2}>\n                                        Description\n                                    </Label>\n                                    <Col sm={10}>\n                                        <Input disabled type=\"textarea\" name=\"description\" id=\"exampleText\" value={data.description} />\n                                    </Col>\n                                </FormGroup>\n                                {!disabled ? (\n                                    <FormGroup check row>\n                                        <Col sm={{ size: 10, offset: 2 }}>\n                                            <Button>Update</Button>\n                                        </Col>\n                                    </FormGroup>\n                                ) : (\n                                    <div></div>\n                                )} */}\n                            </Form>\n                        </CardBody>\n                    </Card>\n                </Container>\n            </CSSTransition>\n        </TransitionGroup>\n    </Fragment>)\n\n\n    // < div > {id.id }</div >\n\n\n    function formatDate(dateString) {\n        return formatDateUtils(dateString)\n    }\n\n};\n\nexport default UserDetail;\n","import React, { Fragment } from \"react\";\nimport { Route } from \"react-router-dom\";\n\n// Layout\n\nimport AppHeader from \"../../Layout/AppHeader\";\nimport AppSidebar from \"../../Layout/AppSidebar\";\nimport AppFooter from \"../../Layout/AppFooter\";\nimport UsersDetails from \"./user-detail\";\n\n\nconst UserDetailCover = ({ match }) => (\n    <Fragment>\n        <AppHeader />\n        <div className=\"app-main\">\n            <AppSidebar />\n            <div className=\"app-main__outer\">\n                <UsersDetails></UsersDetails>\n                <div className=\"app-wrapper-footer\">\n                    <AppFooter />\n                </div>\n            </div>\n        </div>\n    </Fragment>\n);\n\nexport default UserDetailCover;\n","// apiService.js\nconst BASE_URL = 'http://14.225.211.111:3000/v1';\n\nasync function fetchData(endpoint, authToken, params = {}) {\n    const url = new URL(`${BASE_URL}/${endpoint}`);\n    // Retrieve the value from local storage using the key\n    const storedValue = localStorage.getItem('user');\n    authToken = '';\n    let user = null\n\n    // Check if the value is present\n    if (storedValue !== null) {\n        // Value found in local storage, do something with it\n        // Parse the JSON string back to an object\n        user = JSON.parse(storedValue)\n        console.log(user.tokens.access.token)\n        authToken = user.tokens.access.token;\n    } else {\n        // Value not found in local storage\n        console.log('Value not found in local storage');\n    }\n    console.log(authToken)\n    // Add query parameters\n    Object.keys(params).forEach(key => url.searchParams.append(key, params[key]));\n\n    const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n            'Authorization': `Bearer ${authToken}`, // Include the authorization token in the header\n            'Content-Type': 'application/json', // Example of adding a Content-Type header\n        },\n    });\n\n    console.log(response)\n\n    if (!response.ok) {\n        throw new Error('Network response was not ok');\n    }\n    try {\n        const jsonData = await response.json(); // Read the response body once\n        console.log(jsonData)\n        return jsonData;\n    } catch (error) {\n        throw new Error('Failed to parse response JSON');\n    }\n}\n\nasync function getDetail(endpoint, authToken, id) {\n    const url = new URL(`${BASE_URL}/${endpoint}/${id}`);\n    // Retrieve the value from local storage using the key\n    const storedValue = localStorage.getItem('user');\n    authToken = '';\n    let user = null\n\n    // Check if the value is present\n    if (storedValue !== null) {\n        // Value found in local storage, do something with it\n        // Parse the JSON string back to an object\n        user = JSON.parse(storedValue)\n        authToken = user.tokens.access.token;\n    } else {\n        // Value not found in local storage\n        console.log('Value not found in local storage');\n    }\n\n    console.log(authToken)\n    // Add query parameters\n\n    const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n            'Authorization': `Bearer ${authToken}`, // Include the authorization token in the header\n            'Content-Type': 'application/json', // Example of adding a Content-Type header\n        },\n    });\n\n    console.log(response)\n\n    if (!response.ok) {\n        throw new Error('Network response was not ok');\n    }\n    try {\n        const jsonData = await response.json(); // Read the response body once\n        console.log(jsonData)\n        return jsonData;\n    } catch (error) {\n        throw new Error('Failed to parse response JSON');\n    }\n}\n\nexport { fetchData, getDetail };\n","function formatDateUtils(dateString) {\n    const date = new Date(dateString);\n    if (isNaN(date.getTime())) {\n        return 'Invalid Date'; // Return a default value if the provided string is not a valid date\n    }\n    const hours = String(date.getHours()).padStart(2, '0');\n    const minutes = String(date.getMinutes()).padStart(2, '0');\n    const day = String(date.getDate()).padStart(2, '0');\n    const month = String(date.getMonth() + 1).padStart(2, '0'); // Adding 1 because months are zero-based\n    const year = date.getFullYear();\n    return `${hours}:${minutes} ${day}-${month}-${year}`;\n}\n\nexport { formatDateUtils }"],"names":["_useState","useState","_useState2","_slicedToArray","data","setData","_useState3","_useState4","setLoading","_useState5","_useState6","setError","_useState7","_useState8","selectedStatus","setSelectedStatus","_useState9","_useState10","status","setStatus","_useState11","_useState12","setSelectedType","_useState13","_useState14","setDisabled","id","useParams","console","log","JSON","stringify","fetchDataFromAPI","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","responseData","wrap","_context","prev","next","length","getDetail","sent","createdAt","formatDate","updatedAt","type","t0","finish","stop","apply","arguments","dateString","formatDateUtils","useEffect","imageExists","img","Image","src","avatar","test","onload","onerror","checkImage","_jsx","Fragment","children","TransitionGroup","CSSTransition","component","classNames","appear","timeout","enter","exit","Container","fluid","Card","className","_jsxs","CardBody","CardTitle","Form","onSubmit","e","preventDefault","changeApplicationStatus","_ref2","_callee2","_context2","error","FormGroup","row","Label","for","sm","Col","alt","style","width","height","borderRadius","defaultImageUrl","Input","disabled","name","placeholder","value","email","role","gender","accountType","dob","startFreeTime","endFreeTime","match","AppHeader","AppSidebar","UsersDetails","AppFooter","BASE_URL","fetchData","_x","_x2","_fetchData","endpoint","authToken","params","url","storedValue","user","response","jsonData","_args","undefined","URL","concat","localStorage","getItem","parse","tokens","access","token","Object","keys","forEach","key","searchParams","append","fetch","method","headers","ok","Error","json","abrupt","_x3","_x4","_x5","_getDetail","date","Date","isNaN","getTime","hours","String","getHours","padStart","minutes","getMinutes","day","getDate","month","getMonth","year","getFullYear"],"sourceRoot":""}